/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package eu.busi.myplanning.domain.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import eu.busi.myplanning.domain.dto.EventDTO;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.time.Instant;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-09-06T09:34:46.153534100+02:00[Europe/Berlin]")
@Api(value = "event", description = "the event API")
public interface EventApi {

    Logger log = LoggerFactory.getLogger(EventApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();

    

    @ApiOperation(value = "", nickname = "deleteEvent", notes = "", response = Boolean.class, tags={ "Event API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Boolean.class) })
    @RequestMapping(value = "/event/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Boolean> deleteEvent(@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "findEvent", notes = "", response = Object.class, tags={ "Event API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Object.class) })
    @RequestMapping(value = "/event/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<Object> findEvent(@ApiParam(value = "",required=true) @PathVariable("id") Long id
);


    @ApiOperation(value = "", nickname = "listEvents", notes = "", response = Object.class, tags={ "Event API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Object.class) })
    @RequestMapping(value = "/event",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<Object> listEvents(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "userId", required = true) Long userId
,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "startDate", required = true) Instant startDate
,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "endDate", required = true) Instant endDate
);


    @ApiOperation(value = "", nickname = "saveEvent", notes = "", response = Object.class, tags={ "Event API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Object.class) })
    @RequestMapping(value = "/event",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Object> saveEvent(@ApiParam(value = "" ,required=true )  @Valid @RequestBody EventDTO body
);


    @ApiOperation(value = "", nickname = "updateEvent", notes = "", response = Object.class, tags={ "Event API", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Object.class) })
    @RequestMapping(value = "/event/{id}",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Object> updateEvent(@ApiParam(value = "" ,required=true )  @Valid @RequestBody EventDTO body
,@ApiParam(value = "",required=true) @PathVariable("id") Long id
);

}
